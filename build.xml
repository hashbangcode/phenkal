<?xml version="1.0"?>
<project name="drupal_phing_build_file"  default="default">

  <target name="default" description="The default target used when no arguments have been given.">
    <exec command="./vendor/bin/phing -f ${phing.file} -l" outputProperty="phing_targets" />
    <echo>Please select a target.</echo>
    <echo>${phing_targets}</echo>
  </target>

  <target name="init" hidden="true" description="Initialisation target that sets up certain directory paths.">
    <!--
    Create some directories variables for use within the project.

    Each of these can be overridden by passing in a parameter or a setting in the build.properties file.
    -->

    <!-- The directory that holds the source code. -->
    <resolvepath propertyName="source_root" file="${project.basedir}/../" />

    <!-- The directory that contains the rest of the site components,
         including the source code, document and web directories. -->
    <if>
      <not>
        <isset property="passed_root_path" />
      </not>
      <then>
        <resolvepath propertyName="root_path" file="../../" />
      </then>
    </if>

    <!-- The directory that holds all of the user files for the website. -->
    <if>
      <not>
        <isset property="passed_docs_path" />
      </not>
      <then>
        <resolvepath propertyName="docs_path" file="${root_path}/docs" />
      </then>
    </if>

    <!-- This is the directory that will be used by the server, it should be symlinked to the real docroot. -->
    <if>
      <not>
        <isset property="passed_web_path" />
      </not>
      <then>
        <resolvepath propertyName="web_path" file="${root_path}/docroot" />
      </then>
    </if>

    <!-- Actual docroot directory -->
    <resolvepath propertyName="docroot_path" file="${project.basedir}/../../docroot/"/>

    <!-- pick up the values from the build.properties file (overriding anything that's already been set -->
    <property file="build.properties" override="true" />

    <!-- Path to the reports directory (can be configured) -->
    <if>
      <not>
        <isset property="build.project.type" />
      </not>
      <then>
        <property name="build.project.type" value="standard" />
      </then>
    </if>

    <if>
      <equals arg1="${build.project.type}" arg2="flat" trim="true" casesensitive="false" />
      <then>
        <resolvepath propertyName="reports_path" file="${project.basedir}/../.reports/"/>
        <property name="scripts_dir" value=".scripts/phenkal" />
        <resolvepath propertyName="docroot_path" file="${project.basedir}/../"/>
      </then>
      <else>
        <resolvepath propertyName="reports_path" file="${project.basedir}/../../reports/"/>
        <property name="scripts_dir" value="scripts/phenkal" />
      </else>
    </if>

    <!-- Make the report directory -->
    <if>
      <not>
        <available file="${reports_path}" />
      </not>
      <then>
        <mkdir dir="${reports_path}" />
      </then>
    </if>

    <!-- Error if the Drupal version number if not as we expect -->
    <if>
      <not>
        <or>
          <equals arg1="${build.drupal.version}" arg2="7" trim="true" casesensitive="false" />
          <equals arg1="${build.drupal.version}" arg2="8" trim="true" casesensitive="false" />
        </or>
      </not>
      <then>
        <fail message="Drupal version (set in build.drupal.version) must be either 7 or 8. '${build.drupal.version}' found." />
      </then>
    </if>

    <!-- Set the correct drupal version number -->
    <if>
      <equals arg1="${build.drupal.version}" arg2="8" trim="true" casesensitive="false" />
      <then>
        <property name="drupal_version_number" value="d8" />
      </then>
      <else>
        <property name="drupal_version_number" value="d7" />
      </else>
    </if>

    <!-- Set the default timestamp. -->
    <php expression="date_default_timezone_set('Europe/London');" />
    <tstamp />
  </target>

  <target name="showproperties" depends="init" description="Debug helper that shows the variables that are currently available">
    <echo>source_root: ${source_root}</echo>
    <echo>passed_root_path: ${passed_root_path}</echo>
    <echo>root_path: ${root_path}</echo>
    <echo>passed_docs_path: ${passed_docs_path}</echo>
    <echo>docs_path: ${docs_path}</echo>
    <echo>passed_web_path: ${passed_web_path}</echo>
    <echo>web_path: ${web_path}</echo>
    <echo>docroot_path: ${docroot_path}</echo>
    <echo>reports_path: ${reports_path}</echo>
    <echo>scripts_dir: ${scripts_dir}</echo>
    <echo>build.project.type: ${build.project.type}</echo>
    <echo>build.drupal.version: ${build.drupal.version}</echo>
    <echo>drupal_version_number: ${drupal_version_number}</echo>
  </target>

  <target name="backupdatabase" depends="init" description="Runs a database backup using drush">
    <!-- backup the database -->
    <echo>Backing Up Database to ${build.project.name}_${DSTAMP}_${TSTAMP}.sql</echo>
    <exec command="drush sql-dump --result-file=${root_path}/backups/${build.project.name}_${DSTAMP}_${TSTAMP}.sql --gzip --yes"
          dir="${source_root}/docroot/"
          outputProperty="backup_output" />
    <echo>Database backup complete.</echo>
    <echo>${backup_output}</echo>
  </target>

  <target name="syntaxcheck_all" depends="init" description="Syntax check the project docroot.">
    <!-- syntax check -->
    <phingcall target="syntaxcheck_php" />
    <phingcall target="syntaxcheck_js" />
  </target>

  <target name="syntaxcheck_php" depends="init" description="Run PHP syntax checking on the project docroot.">
    <echo>Checking for PHP syntax errors.</echo>
    <phplint haltonfailure="true">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_all_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_all_php" />
    </phplint>
  </target>

  <target name="syntaxcheck_js" depends="init" description="Run JavaScript syntax checking on the project docroot.">
    <!-- Find all JavaScript files -->
    <echo>Checking for JavaScript syntax errors.</echo>
    <jshint haltOnWarning="false" reporter="jslint">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_all_javascript" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_all_javascript" />
    </jshint>
  </target>

  <target name="sudotest" description="Test to see if the current user is administrator. Build fails if not the case.">
    <!-- Create the currentuser property -->
    <exec command="whoami" outputProperty="currentuser" />

    <!-- Set the 'issudo' property to be true if the user is root -->
    <condition property="issudo">
      <or>
        <equals arg1="${currentuser}" arg2="root" />
        <equals arg1="${currentuser}" arg2="jenkins" />
      </or>
    </condition>

    <!-- Fail the build if the user is not root -->
    <if>
      <not>
        <equals arg1="${issudo}" arg2="true" />
      </not>
      <then>
        <fail message="You must run this build as sudo! Current user is ${currentuser}" />
      </then>
    </if>
  </target>

  <target name="buildcomposerinstall" description="Install the composer packages used for analysis.">
    <delete dir="${project.basedir}/vendor" />
    <exec command="composer install" dir="${project.basedir}" outputProperty="composer_install_output" returnProperty="composer_install_return" />
    <echo>OUTPUT: ${composer_install_output}</echo>
    <echo>RETURN: ${composer_install_return}</echo>
    <echo>Composer install complete</echo>
  </target>

  <target name="codeanalysis" depends="syntaxcheck_all,checkfordebugcode-php,checkfordebugcode-js,checkfortodos-php,checkfortodos-js,phploc,phpmd,phpcpd,phpcs,phpdepend" description="Run all code analysis targets." />

  <target name="phploc" depends="init" description="Run a phploc analysis on the custom PHP files in the project.">
    <phploc reportType="csv" reportName="phploc" reportDirectory="${reports_path}">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_php" />
    </phploc>
  </target>

  <target name="phpmd" depends="init" description="Run a phpmd analysis on the custom PHP files in the project.">
    <phpmd rulesets="codesize,design,naming,unusedcode">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_php" />
      <formatter type="xml" outfile="${reports_path}/pmd.xml"/>
    </phpmd>
  </target>

  <target name="phpcpd" depends="init" description="Run a phpcpd analysis on the custom PHP files in the project.">
    <phpcpd minLines="10" minTokens="20">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_php" />
      <formatter type="pmd" outfile="${reports_path}/cpd.xml"/>
    </phpcpd>
  </target>

  <target name="phpcs" depends="init" description="Run a phpcs analysis on the custom PHP files in the project.">
    <!-- Ensure that the phpcs command knows where the Drupal coding standard is. -->
    <exec command="${project.basedir}/vendor/bin/phpcs --config-set installed_paths ${project.basedir}/vendor/drupal/coder/coder_sniffer/" />
    <phpcodesniffer standard="Drupal" format="checkstyle">
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_php" />
      <formatter type="checkstyle" outfile="${reports_path}/checkstyle.xml"/>
      <formatter type="full" outfile="${reports_path}/checkstyle.txt"/>
    </phpcodesniffer>
  </target>

  <target name="phpdepend" depends="init" description="Run a phpdepend analysis on the custom PHP files in the project.">
    <phpdepend>
      <fileset dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_php" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_php" />
      <logger type="jdepend-xml" outfile="${reports_path}/jdepend.xml"/>
      <analyzer type="coderank-mode" value="method"/>
    </phpdepend>
  </target>

  <target name="checkfordebugcode-php" depends="init" description="Check custom PHP code for debug statements">
    <phingcall target="checkfordebugcode">
      <property name="debugcode.language" value="php" override="true" />
      <property name="debugcode.regexp" value="(var_export\(|var_dump\(|dsm\(|dpm\(|die\(|(?&lt;=[^drupal_]|\s|^)exit\()" override="true" />
    </phingcall>
  </target>

  <target name="checkfordebugcode-js" depends="init" description="Check custom Javascript code for debug statements">
    <phingcall target="checkfordebugcode">
      <property name="debugcode.language" value="javascript" override="true" />
      <property name="debugcode.regexp" value="(console\.log\()" override="true" />
    </phingcall>
  </target>

  <target name="checkfordebugcode" hidden="true" description="Check for any debug code left in custom files.">
    <if>
      <not>
        <or>
          <isset property="debugcode.language" />
          <isset property="debugcode.regexp" />
        </or>
      </not>
      <then>
        <fail message="This task should not be run directly. Use either checkfordebugcode-php or checkfordebugcode-js." />
      </then>
    </if>

    <echo>Checking for ${debugcode.language} debug code.</echo>

    <fileset id="debugcode.found" dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_${debugcode.language}" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_${debugcode.language}">
      <containsregexp expression="${debugcode.regexp}" />
    </fileset>

    <property name="debugcode.report" value="${reports_path}/debug_${debugcode.language}.log" override="true" />

    <echo>debugcode.report|${debugcode.report}|</echo>

    <!-- Delete the existing report file -->
    <delete file="${debugcode.report}" failonerror="false" verbose="false" />

    <!-- Initialise a new report file -->
    <touch file="${debugcode.report}" />

    <foreach target="reportdebugerrors" param="filename" absparam="absfilename">
      <fileset refid="debugcode.found" />
    </foreach>

    <loadfile property="debugcode.found" file="${debugcode.report}" />

    <!-- Set a default value of the debugcode.found property so we can use a comparison. -->
    <property name="debugcode.found" value="" override="false" />

    <if>
      <not>
        <equals arg1="${debugcode.found}" arg2="" />
      </not>
      <then>
        <fail message="${debugcode.language} debug code detected:${line.separator}${debugcode.found}" />
      </then>
      <else>
        <echo>No ${debugcode.language} debug code found.</echo>
      </else>
    </if>
  </target>

  <target name="reportdebugerrors" hidden="true">
    <loadfile property="debugcode.found" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="${debugcode.regexp}" />
        </linecontainsregexp>
      </filterchain>
    </loadfile>

    <if>
      <not>
        <equals arg1="${debugcode.found}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debugcode.found}${line.separator}${line.separator}" destFile="${debugcode.report}" />
      </then>
    </if>
  </target>

  <target name="checkfortodos-php" depends="init" description="Check custom PHP code for todo messages">
    <phingcall target="checkfortodos">
      <property name="todos.language" value="php" override="true" />
      <property name="todos.regexp" value="(@todo)" override="true" />
    </phingcall>
  </target>

  <target name="checkfortodos-js" depends="init" description="Check custom Javascript code for todo messages">
    <phingcall target="checkfortodos">
      <property name="todos.language" value="javascript" override="true" />
      <property name="todos.regexp" value="(@todo)" override="true" />
    </phingcall>
  </target>

  <target name="checkfortodos" hidden="true" description="Check for any todo messages in code.">
    <if>
      <not>
        <or>
          <isset property="todos.language" />
          <isset property="todos.regexp" />
        </or>
      </not>
      <then>
        <fail message="This task should not be run directly. Use either checkfortodos-php or checkfortodos-js." />
      </then>
    </if>

    <echo>Checking for ${todos.language} todo messages in code.</echo>

    <fileset id="todos.found" dir="${docroot_path}" excludesfile="${project.basedir}/filesets/${drupal_version_number}/exclude_custom_drupal_${todos.language}" includesfile="${project.basedir}/filesets/${drupal_version_number}/include_custom_drupal_${todos.language}">
      <containsregexp expression="${todos.regexp}" />
    </fileset>

    <property name="todos.report" value="${reports_path}/todo_${todos.language}.log" override="true" />

    <!-- Delete the existing report file -->
    <delete file="${todos.report}" failonerror="false" verbose="false" />

    <!-- Initialise a new report file -->
    <touch file="${todos.report}" />

    <foreach target="reporttodosfound" param="filename" absparam="absfilename">
      <fileset refid="todos.found" />
    </foreach>

    <!-- Load any todos found into a property. -->
    <loadfile property="todos.found" file="${todos.report}" />

    <!-- Set a default value of the todos.found property so we can use a comparison. -->
    <property name="todos.found" value="" override="false" />

    <if>
      <not>
        <equals arg1="${todos.found}" arg2="" />
      </not>
      <then>
        <echo>${todos.language} todos code detected:${line.separator}${todos.found}</echo>
      </then>
      <else>
        <echo>No ${todos.language} todos code found.</echo>
      </else>
    </if>
  </target>

  <target name="reporttodosfound" hidden="true">
    <loadfile property="todos.found" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="${todos.regexp}" />
        </linecontainsregexp>
      </filterchain>
    </loadfile>

    <if>
      <not>
        <equals arg1="${todos.found}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${todos.found}${line.separator}${line.separator}" destFile="${todos.report}" />
      </then>
    </if>
  </target>

</project>
